# -*- coding: utf-8 -*-
"""coderscave-2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KSklBWHMYeMIh1Z3xI_BXNE_tULdVyQb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
df = pd.read_csv("/content/monthly_data.csv")
df.head()

df.shape

df.columns

df.isnull().sum()

df.describe()

df.info()

df.nunique()

"""MONTHLY CLIMATE ANALYSIS"""

sns.set_style("ticks")
numerical_columns=df[['MonthlyGreatestPrecip','MonthlyGreatestSnowfall','MonthlySeaLevelPressure',
                      'MonthlyStationPressure','MonthlyTotalLiquidPrecipitation','MonthlyGreatestSnowDepth',]]
for column in numerical_columns.columns:
  plt.figure(figsize=(10,6))
  sns.histplot(df[column],kde=True)
  plt.title(f'Distribution of [column]')
  plt.show()

"""TIME SERIES ANALYSIS OF MONTHLY MEAN TEMPERATURE"""

#convert 'DATE' column to datetime format
df['DATE'] = pd.to_datetime(df['DATE'])
df.set_index('DATE',inplace=True)
plt.figure(figsize=(11,6))
plt.plot(df['MonthlyMeanTemperature'])
plt.title('Time series Analysis- Monthly Mean Temperature ')
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.show()

"""VISUALIZING SEASONAL DECOMPOSITION OF MONTHLY MEAN TEMPERATURE"""

from statsmodels.tsa.seasonal import seasonal_decompose
result = seasonal_decompose(df['MonthlyMeanTemperature'],model='additive',period=12)
plt.figure(figsize=(15,13))
plt.subplot(5,2,1)
plt.plot(result.trend)
plt.title('trend component')
plt.subplot(5,2,2)
plt.plot(result.seasonal)
plt.title('seasonal component')
plt.subplot(5,2,3)
plt.plot(result.resid)
plt.title('residual component')
plt.subplot(5,2,4)
plt.plot(result.observed)
plt.title('observed component')
plt.tight_layout()
plt.show()

"""PAIR PLOT"""

pairplot_columns=df[['AWND','CDSD','CLDD','DSNW','HDSD','HTDD']]
sns.pairplot(pairplot_columns)
plt.suptitle('pair plot for numerical variable',y=1.00)
plt.show()

"""FREQUENCY OF WEATHER EVENTS"""

import pandas as pd
df['DATE'] = pd.to_datetime(df['DATE'])
df.set_index('DATE', inplace=True)
columns_for_frequency_analysis = ['MonthlyDaysWithGT001Precip',
                                  'MonthlyDaysWithGT010Precip',
                                  'MonthlyDaysWithGT32Temp',
                                  'MonthlyDaysWithGT90Temp',
                                  'MonthlyDaysWithLT0Temp',
                                  'MonthlyDaysWithLT32Temp']
plt.figure(figsize=(15, 10))
for column in columns_for_frequency_analysis:
    plt.plot(df[column], label=column)
plt.title('Frequency of Weather Events')
plt.xlabel('DATE')
plt.ylabel('Frequency')
plt.legend()
plt.show()

"""EXTREME CLIMATE CONDITIONS"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
df['DATE'] = pd.to_datetime(df['DATE'])
df.set_index('DATE', inplace=True)
precipitation_threshold = 3
temperature_threshold_low = 18
temperature_threshold_high = 40
wind_speed_threshold = 5
extreme_precipitation = df[df['MonthlyTotalLiquidPrecipitation'] > precipitation_threshold]
extreme_high_temp = df[df['MonthlyMaximumTemperature'] > temperature_threshold_high]
extreme_low_temp = df[df['MonthlyMinimumTemperature'] < temperature_threshold_low]
extreme_wind_speed = df[df['AWND'] > wind_speed_threshold]
fig, axes = plt.subplots(2, 2, figsize=(14, 10))
sns.histplot(data=extreme_precipitation, x='MonthlyTotalLiquidPrecipitation', bins=20, kde=True, ax=axes[0, 0])
axes[0, 0].set_title('Extreme Precipitation Events')
sns.histplot(data=extreme_low_temp, x='MonthlyMinimumTemperature', bins=20, kde=True, color='green', ax=axes[1, 0])
axes[1, 0].set_title('Extreme Low Temperature Events')
sns.histplot(data=extreme_wind_speed, x='AWND', bins=20, kde=True, color='blue', ax=axes[1, 1])
axes[1, 1].set_title('Extreme Wind Speed Events')
sns.histplot(data=extreme_high_temp, x='MonthlyMaximumTemperature', bins=20, kde=True, color='purple', ax=axes[0, 1])
axes[0, 1].set_title('Extreme High Temperature Events')
plt.tight_layout()
plt.show()

"""SEASONAL ANALYSIS"""

import pandas as pd
import matplotlib.pyplot as plt
df['DATE'] = pd.to_datetime(df['DATE'])
df.set_index('DATE', inplace=True)
columns_of_interest = ['MonthlyMeanTemperature', 'MonthlyTotalLiquidPrecipitation']
seasonal_df = df[columns_of_interest]
monthly_seasonal_df = seasonal_df.resample('M').mean()
plt.figure(figsize=(10, 6))
for column in monthly_seasonal_df.columns:
    plt.plot(monthly_seasonal_df.index, monthly_seasonal_df[column], label=column)
plt.title('Seasonal Analysis')
plt.xlabel('Date')
plt.ylabel('Average Value')
plt.legend()
plt.show()

"""ANOMALY DETECTION"""

import numpy as np
mean_temp = df['MonthlyMeanTemperature']
mean = np.mean(mean_temp)
std_dev = np.std(mean_temp)
z_scores = (mean_temp - mean) / std_dev
threshold = 1
anomalies = df[abs(z_scores) > threshold]
plt.figure(figsize=(11, 6))
plt.plot(df.index, mean_temp, label='Monthly Mean Temperature')
plt.scatter(anomalies.index, anomalies['MonthlyMeanTemperature'], color='green', label='Anomalies')
plt.title('Anomaly Detection - Monthly Mean Temperature')
plt.xlabel('Date')
plt.ylabel('Temperature')
plt.legend()
plt.show()

"""PRECIPITATION AND TEMPERATURE"""

import pandas as pd
import matplotlib.pyplot as plt
precipitation_thresholds = [0.01, 0.10]  # in inches
temperature_thresholds = [32, 90]
fig, axs = plt.subplots(2, 1, figsize=(10, 8))
precipitation_cols = ['MonthlyDaysWithGT001Precip', 'MonthlyDaysWithGT010Precip']
precipitation_labels = ['Precipitation > 0.01 inches', 'Precipitation > 0.10 inches']
for i in range(len(precipitation_cols)):
    ax = axs[0] if i == 0 else axs[1]
    ax.bar(df.index, df[precipitation_cols[i]], label=precipitation_labels[i], alpha=0.7)
temperature_cols = ['MonthlyDaysWithGT32Temp', 'MonthlyDaysWithGT90Temp']
temperature_labels = ['Temperature > 32°F', 'Temperature > 90°F']
for i in range(len(temperature_cols)):
    ax = axs[0] if i == 0 else axs[1]
    ax.bar(df.index, df[temperature_cols[i]], label=temperature_labels[i], alpha=0.7)
for ax in axs:
    ax.set_ylabel('Frequency')
    ax.legend()
plt.xlabel('Date')
plt.tight_layout()
plt.show()

"""MONTHLY CLIMATE DEAPARTURES FROM AVERAGE"""

import matplotlib.pyplot as plt
fig, axs = plt.subplots(3, 1, figsize=(12, 15))
axs[0].plot(df.index, df['MonthlyDepartureFromNormalAverageTemperature'], color='red')
axs[0].set_title('Monthly Departure From Normal Average Temperature')
axs[0].set_xlabel('Date')
axs[0].set_ylabel('Departure (°F)')
axs[1].bar(df.index, df['MonthlyDepartureFromNormalCoolingDegreeDays'], color='yellow')
axs[1].set_title('Monthly Departure From Normal Cooling Degree Days')
axs[1].set_xlabel('Date')
axs[1].set_ylabel('Cooling Degree Days')
axs[2].bar(df.index, df['MonthlyDepartureFromNormalPrecipitation'], color='brown')
axs[2].set_title('Monthly Departure From Normal Precipitation')
axs[2].set_xlabel('Date')
axs[2].set_ylabel('Departure (inches)')
plt.tight_layout()
plt.show()

"""FREQUENCY OF WAETHER EVENTS"""

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
target_variable = 'MonthlyMeanTemperature'
features = ['AWND', 'CDSD', 'CLDD', 'DSNW', 'HDSD', 'HTDD',
                       'MonthlyDaysWithGT001Precip', 'MonthlyDaysWithGT010Precip',
                       'MonthlyDaysWithGT32Temp', 'MonthlyDaysWithGT90Temp',
                       'MonthlyDaysWithLT0Temp', 'MonthlyDaysWithLT32Temp',
                       'MonthlyDepartureFromNormalAverageTemperature',
                       'MonthlyDepartureFromNormalCoolingDegreeDays',
                       'MonthlyDepartureFromNormalHeatingDegreeDays',
                       'MonthlyDepartureFromNormalMaximumTemperature',
                       'MonthlyDepartureFromNormalMinimumTemperature',
                       'MonthlyDepartureFromNormalPrecipitation',
                       'MonthlyMaxSeaLevelPressureValue', 'MonthlyMaximumTemperature',
                       'MonthlyMinimumTemperature', 'MonthlySeaLevelPressure',
                       'MonthlyStationPressure', 'MonthlyTotalLiquidPrecipitation',
                       'NormalsHeatingDegreeDay']
X = df[features]
y = df[target_variable]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
r2 = r2_score(y_test, y_pred)
print('R-squared:', r2)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)